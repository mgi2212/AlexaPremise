from __future__ import absolute_import, division, print_function, unicode_literalsimport jsonimport osimport binasciifrom flask import Flask, render_template, request, url_for, redirect, session, Response, jsonify# Flask Initialization# global variable must be named "application" as per EB requirementapplication = Flask(__name__)application.debug = True# secret key to encode session cookie# (http://flask.pocoo.org/docs/quickstart/#sessions)application.secret_key = binascii.b2a_hex(os.urandom(30))## Read config file and create Identity provider#def getIdentityProvider(provider) :	import os	from IdentityProvider import getIdentityProvider	appID = os.environ.get(provider.upper() + '_APP_ID')	appSecret = os.environ.get(provider.upper() + '_APP_SECRET')	roleARN = os.environ.get(provider.upper() + '_ROLE_ARN')	return getIdentityProvider(provider, appID, appSecret, roleARN)@application.route("/")def index():	enabled_providers = getEnabledProviders()	return render_template('default.html', enabled_providers=enabled_providers)@application.route("/handle")def handle():	session['q_client_id'] = request.args.get('client_id')	session['q_response_type'] = request.args.get('response_type')	session['q_state'] = request.args.get('state')	session['q_scope'] = request.args.get('scope')	session['q_redirect_uri'] = request.args.get('redirect_uri')	providers = ['amazon']	return render_template('accountlink.html', enabled_providers=providers)@application.route("/submit")def submit():	url2 = session['q_redirect_uri'] + '?code=' + session['q_code'] + '&state=' + session['q_state']	result = redirect(url2)	return result@application.route("/privacy")def privacy():	return render_template('privacy.html')@application.route('/initiateLoginAccountLink')def initiateLoginAccountLink():	return redirect(getIdentityProvider('amazon').accountlinkURL())@application.route('/initiateLogin/<provider>')def initiateLogin(provider):	return redirect(getIdentityProvider(provider).loginURL())@application.route('/oauth2accountlinkcallback')def OAuth2AccountLinkCallback():	code = request.args.get('code', 'unknown')	if (code == 'unknown'):		result = render_template('error.html')	else:		url2 = session['q_redirect_uri'] + '?code=' + session['q_code'] + '&state=' + session['q_state']		result = redirect(url2)	return result	@application.route('/oauth2callback/<provider>')def OAuth2Callback(provider):	code = request.args.get('code', 'unknown')	if (code == 'unknown'):		result = render_template('error.html')	else:		url2 = session['q_redirect_uri'] + '?code=' + code + '&state=' + session['q_state']		result = redirect(url2)	return result@application.route('/oauth2oldcallback/<provider>')def OAuth2OldCallback(provider):	code = request.args.get('code', 'unknown')	session['q_code'] = code		if (code == 'unknown'):		result = render_template('error.html')	else:		credentials, profile = getIdentityProvider(provider).oauthCallback(code)				import urllib		url = url_for('setup', _scheme="https", _external=True)				# save credentials and profile in the server side session		session.update(credentials)		session.update(profile)				result = redirect(url)			return result@application.route('/auth/o2/token', methods=['GET', 'POST'])def token():	# need to handle token request, and token refresh request, as a proxy for LWA	multi_dict = request.args	session['alexa_redirect_uri'] = request.form.get('redirect_uri')	amazonidprovider = getIdentityProvider('amazon')	response_recieved = amazonidprovider.doGetTokenOriginal(request.form.get('code'))	return jsonify(response_recieved)@application.route('/oauth2tokencallback')def OAuth2TokenCallback():	print('-----/oauth2tokencallback called')	#send back to alexa_redirect_uri	print('need to send back to: ' + session['alexa_redirect_uri'])	return ''@application.route('/setup')def setup():	return render_template('setup.html')def getEnabledProviders():	providers = ['amazon']	enabled = []	for provider in providers:		if os.environ.get(provider.upper() + '_APP_ID') and os.environ.get(provider.upper() + '_APP_SECRET') and os.environ.get(provider.upper() + '_ROLE_ARN'):			enabled.append(provider)		return enabledif (__name__ == "__main__"):	application.run(debug=True)